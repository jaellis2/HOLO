%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   HO/LO Profugus & NDA connectivity.
%
%   J. Austin Ellis
%   18 May 2016
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear;

%%%%%%%%%
%
%   CHANGE TO PERSONAL FILE LOCATIONS
%
%


input_filename = 'my_mcfixedsrc_cart50.xml';
running_filename = 'running_mcfixedsrc_cart.xml';

xmc_pwd = '~/Documents/SOFTWARE/ProfugusB/ProfRelease/bin/';
HO_sol_pwd = '~/Documents/SOFTWARE/HOLO/HighOrderSolutions/';


np_factor = 1;
q_external = .5;
c_factor = .8;                      % .8, .9, .99

phi_true_data = load('phi_c8.mat');

phi_true = phi_true_data.phi_true;



% holo_elem = {'x_edges'; 'general_source'; 'xs library'};
holo_elem = {'x_edges'; 'xs library'; 'Np'; 'problem_name'};
mat_elem = {'sigma_t'; 'sigma_s0'};



input_data = parseXML(input_filename, running_filename, holo_elem, mat_elem);

%%%%%%%%
%
%  Set up parameters
%

tau = input_data.tau;
sig_t = input_data.sig_t;
sig_s = sig_t * c_factor;
Np = input_data.Np;
prob_name = input_data.prob_name;


xgrid = input_data.xgrid;
cgrid = (xgrid(1:end-1) + xgrid(2:end))/2.0;

NX = length(xgrid);


%%%%
%   HARD CODED INFO
%

sig_t = sig_t*ones(NX,1);
sig_s = sig_s*ones(NX,1);
csig_t = (sig_t(1:end-1) + sig_t(2:end))/2;
csig_s = (sig_s(1:end-1) + sig_s(2:end))/2;


qvec = q_external*ones(NX-1,1);


IR = 0;
IL = 0;
W = 0;
S = 0;
angles = 20;

[ang_r, ang_w] = gauss(angles);

%%%%%

data = struct('tau', tau, 'ir', IR, 'il', IL, 'w', W, 's', S, 'Np', Np, ...
    'ar', ang_r, 'aw', ang_w, 'xgrid', xgrid, 'st', sig_t, ...
    'sig_s', sig_s, 'cgrid', cgrid, 'csig_t', csig_t, 'csig_s', csig_s, ...
    'q', qvec, 'q_sour', q_external, 'prob_name', prob_name, 'filename', input_filename, ...
    'newfilename', running_filename, 'xmc_pwd', xmc_pwd, 'HO_sol_pwd', HO_sol_pwd, ...
    'np_factor', np_factor);

%
%  End Set-Up
%
%%%%%%%%%%

runProfugusSource = 1;
runProfugusAnderson = 1;
runProfugusNDA = 1;
runProfugusNDAAnderson = 1;
runProfugusNDA_KNL = 1;
runAndersonSource = 0;
runAndersonNDA = 0;

convertToFphiResiduals = 0;


average_N = 1;
average_N2 = 1;
norm_type = 2;

mlevel = 1;
maxit = 45;
atol = 1.d-10;
rtol = 1.d-10;

knl_maxitl = 8;
knl_maxit = 8;
knl_atol = 1.d-10;
knl_rtol = 1.d-10;
knl_eta = 8.d-2;

%Np0 = 20K or 200K

% 5mil particles  = 16sec. approx


%%%%%%%%%%
%
%  Begin Running
%

sourcef0 = q_external*ones(NX-1,1);     % CELL-CENTERED SCALAR FLUX INITIAL ITERATE

% sourcef0 = ones(NX-1,1);

%                   nda_sourcef = .35*ones(NX-1,1);
%                   nda_sourcef = zeros(NX-1,1);
%                   nda_sourcef = sourceIteration(nda_sourcef, data);

%%%%%%%%%%%% RUN PROFUGUS SOURCE %%%%%%%%%%%%%%%%%%
%
%   Anderson = 2 norm optimization
%


if(runProfugusSource)
    
    source_mlevel = 0;
    
    prof_andoptions = anderson_optset('maxit',maxit,'atol',atol,'rtol', rtol,...
        'static_data', data, 'mlevel', source_mlevel);
    

    source_rhist_diff = zeros(maxit+2, 1);
    source_rhist = zeros(maxit+1, 1);
    
    for j = 1:average_N


    tic();
    
    [prof_sourcef, source_rhisti, source_uhist] = anderson_knl(sourcef0, @profSourceIteration, source_mlevel, prof_andoptions);
    
    source_t = toc();
    
    if(runProfugusAnderson || runProfugusNDA || runProfugusNDAAnderson || runProfugusNDA_KNL)
        s = parseXML(input_filename, running_filename, holo_elem, mat_elem);               % reset running .xml file
    end
    
    if(convertToFphiResiduals)
        
        for i = 1:size(source_rhist,1)
            
            [Fphi, ~] = differential_nda_knl3(source_uhist(:,i), data);
            
            nfphi = norm(Fphi);
            
            source_rhist(i, 2) = nfphi;
        end
        
    end
    
    source_uhist( :, ~any(source_uhist,1) ) = [];
        
    for i = 1:size(source_uhist, 2)
        source_rhist_diff(i) = source_rhist_diff(i) + norm(phi_true - source_uhist(:,i), norm_type);
    end
    
    source_rhist = source_rhist + source_rhisti(:,2);
        

    end

    source_rhist_diff = source_rhist_diff / average_N;
    source_rhist = source_rhist / average_N;
    
    source_rhist_diff( source_rhist_diff == 0) = [];
    source_rhist(source_rhist == 0) = [];

    
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




%%%%%%%%%%%% RUN PROFUGUS ANDERSON %%%%%%%%%%%%%%%%%%

if(runProfugusAnderson)
    
    prof_andoptions = anderson_optset('maxit',maxit,'atol',atol,'rtol', rtol,...
        'static_data', data, 'mlevel', mlevel);
   
    
    anders_rhist_diff = zeros(maxit+2, 1);
    anders_rhist = zeros(maxit+1, 1);
    
    for j = 1:average_N2
 
    tic();
    
    [prof_anders_sourcef, anders_rhisti, anders_uhist] = anderson_knl(sourcef0, @profSourceIteration, mlevel, prof_andoptions);
    
    anders_t = toc();
    
    if(runProfugusNDA || runProfugusNDAAnderson || runProfugusNDA_KNL)
        s = parseXML(input_filename, running_filename, holo_elem, mat_elem);               % reset running .xml file
    end
    
    
    if(convertToFphiResiduals)
        
        for i = 1:size(anders_rhist,1)
            
            [Fphi, ~] = differential_nda_knl3(anders_uhist(:,i), data);
            
            nfphi = norm(Fphi);
            
            anders_rhist(i,2) = nfphi;
            
        end
        
    end
    
    
    anders_uhist( :, ~any(anders_uhist,1) ) = [];
        
    for i = 1:size(anders_uhist, 2)
        anders_rhist_diff(i) = anders_rhist_diff(i) + norm(phi_true - anders_uhist(:,i), norm_type);
    end
    
    anders_rhist = anders_rhist + anders_rhisti(:,2);
    
    end

    anders_rhist_diff = anders_rhist_diff / average_N2;
    anders_rhist = anders_rhist / average_N2;
    
    anders_rhist_diff( anders_rhist_diff == 0) = [];
    anders_rhist(anders_rhist == 0) = [];

    
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%% RUN PROFUGUS NDA SOURCE %%%%%%%%%%%%%%%%%%

if(runProfugusNDA)
    
    source_mlevel = 0;
    
    prof_andoptions = anderson_optset('maxit',maxit,'atol',atol,'rtol', rtol,...
        'static_data', data, 'mlevel', source_mlevel);
    

    nda_rhist_diff = zeros(maxit+2, 1);
    
    nda_rhist = zeros(maxit + 1,1);
    
    for j = 1:average_N
    
    tic();
    
    [prof_nda_sourcef, nda_rhisti, nda_uhist] = anderson_knl(sourcef0, @profNDASource, source_mlevel, prof_andoptions);
    
    nda_t = toc();
    
    if(runProfugusNDAAnderson || runProfugusNDA_KNL)
        s = parseXML(input_filename, running_filename, holo_elem, mat_elem);               % reset running .xml file
    end


        if(convertToFphiResiduals)
        
        for i = 1:size(nda_rhist,1)
            
            [Fphi, ~] = differential_nda_knl3(nda_uhist(:,i), data);
            
            nfphi = norm(Fphi);
            
            nda_rhist(i,2) = nfphi;
        end
        
        end
    
    nda_uhist( :, ~any(nda_uhist,1) ) = [];
    
    for i = 1:size(nda_uhist, 2)
        nda_rhist_diff(i) = nda_rhist_diff(i) + norm(phi_true - nda_uhist(:,i), norm_type);
    end
    
    nda_rhist = nda_rhist + nda_rhisti(:,2);
    
    end
    
    nda_rhist_diff = nda_rhist_diff/average_N;
    nda_rhist = nda_rhist / average_N;
    
   nda_rhist_diff( nda_rhist_diff == 0) = [];
   nda_rhist(nda_rhist == 0) = [];
    
    
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%% RUN PROFUGUS NDA ANDERSON %%%%%%%%%%%%%%%%%%

if(runProfugusNDAAnderson)
    
    prof_andoptions = anderson_optset('maxit',maxit,'atol',atol,'rtol', rtol,...
        'static_data', data, 'mlevel', mlevel);
    


    nda_anders_rhist_diff = zeros(maxit+2, 1);
    
    nda_anders_rhist = zeros(maxit + 1,1);
    
    for j = 1:average_N2


    tic();
    
    [prof_nda_anders_sourcef, nda_anders_rhisti, nda_anders_uhist] = anderson_knl(sourcef0, @profNDASource, mlevel, prof_andoptions);
    
    nda_anders_t = toc();
    
    if(runProfugusNDA_KNL)
        s = parseXML(input_filename, running_filename, holo_elem, mat_elem);               % reset running .xml file
    end
    
    
    if(convertToFphiResiduals)
        
        for i = 1:size(nda_anders_rhist,1)
            
            [Fphi, ~] = differential_nda_knl3(nda_anders_uhist(:,i), data);
            
            nfphi = norm(Fphi);
            
            nda_anders_rhist(i,2) = nfphi;
        end
        
    end
    
    
    nda_anders_uhist( :, ~any(nda_anders_uhist,1) ) = [];
        
    for i = 1:size(nda_anders_uhist, 2)
        nda_anders_rhist_diff(i) = nda_anders_rhist_diff(i) + norm(phi_true - nda_anders_uhist(:,i), norm_type);
    end
    
    nda_anders_rhist = nda_anders_rhist + nda_anders_rhisti(:,2);
    
    end

    nda_anders_rhist_diff = nda_anders_rhist_diff / average_N2;
    nda_anders_rhist = nda_anders_rhist / average_N2;

    nda_anders_rhist_diff(nda_anders_rhist_diff == 0) = [];
    nda_anders_rhist(nda_anders_rhist == 0) = [];
    
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%% RUN PROFUGUS ANALYTIC NEWTON %%%%%%%%%%%%%%%%%%

if(runProfugusNDA_KNL)
    
    
    nloptions2=knl_optset('maxit',knl_maxit, 'maxitl', knl_maxitl, 'atol', knl_atol,'rtol', knl_rtol,...
        'x_dependent_ptv', @differential_ptv, 'p_side', 'right',...
        'x_dependent_jtv', @transport_jv, 'fx_data', 1, 'static_data', data, ...
        'etamax', knl_eta);
    

    knl_nda_rhist_diff = zeros(knl_maxit+2, 1);
    
    knl_nda_rhist = zeros(knl_maxit + 1,1);
    
    for j = 1:average_N


    tic();
    
    [nda_newton_sourcef, knl_nda_rhisti, ierrk, phi_hist] = knl(sourcef0,@differential_nda_knl3,nloptions2);
    
    knl_nda_t = toc();
    %
    %     final_res = differential_nda_knl3(nda_newton_sourcef, data);
    %
    %     nf_res = norm(final_res, 2)
    
    %     nda_newton_sourcef(1:6)
    
    phi_hist = [qvec, phi_hist];
    
        
    for i = 1:size(phi_hist, 2)
        knl_nda_rhist_diff(i) = knl_nda_rhist_diff(i) + norm(phi_true - phi_hist(:,i), norm_type);
    end
    
    knl_nda_rhist = knl_nda_rhist + knl_nda_rhisti(:,1);
    
    end
    
    knl_nda_rhist_diff = knl_nda_rhist_diff / average_N;
    knl_nda_rhist = knl_nda_rhist / average_N;
    
    knl_nda_rhist_diff(knl_nda_rhist_diff == 0) = [];
    knl_nda_rhist(knl_nda_rhist == 0) = [];
    
    
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%% RUN SOURCE ANDERSON %%%%%%%%%%%%%%%%%%

if(runAndersonSource)
    
    andoptions = anderson_optset('maxit',maxit,'atol',atol,'rtol', rtol,...
        'static_data', data, 'mlevel', mlevel);
    
    
    tic();
    
    [anders_sourcef, anders_rhist] = anderson_knl(sourcef0, @sourceIteration, mlevel, andoptions);
    
    toc()
    
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%% RUN NDA ANDERSON %%%%%%%%%%%%%%%%%%

if(runAndersonNDA)
    
    nda_andoptions = anderson_optset('maxit',maxit,'atol',atol,'rtol', rtol,...
        'static_data', data, 'mlevel', mlevel);
    
    
    tic();
    
    [nda_anders_sourcef, nda_anders_rhist] = anderson_knl(sourcef0, @nda_sourceIteration, mlevel, nda_andoptions);
    
    toc()
    
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%






split_iter_Nps = Np * np_factor.^([0:maxit+1]');

iter_Nps = zeros(maxit+2, 1);

for i = 0:maxit+1
    if i > 0
        iter_Nps(i+1) = iter_Nps(i);
    end
    iter_Nps(i+1) = iter_Nps(i+1) + split_iter_Nps(i+1);
end


% knl_nda_rhist(1:8,2), knl_nda_rhist(1:8,1)/knl_nda_rhist(1,1)

knl_iter_Nps = Np*knl_nda_rhisti(:,2);



if(np_factor ~= 1)
    figure(19)
    loglog(iter_Nps(1:size(source_rhist,1)), source_rhist(:,1)/source_rhist(1,1), '-ok', ...
        iter_Nps(1:size(anders_rhist,1)), anders_rhist(:,1)/anders_rhist(1,1), '-og', ...
        iter_Nps(1:size(nda_rhist,1)), nda_rhist(:,1)/nda_rhist(1,1), '-ob', ...
        iter_Nps(1:size(nda_anders_rhist,1)), nda_anders_rhist(:,1)/nda_anders_rhist(1,1), '-or', ...
        knl_iter_Nps(1:end), knl_nda_rhist_diff(:)/knl_nda_rhist_diff(1), '-oc', ...
        'LineWidth', 2)
    set(gca, 'FontSize', 14)
    xlabel(['Total Number of Histories (Np_0 = ', num2str(Np*2/1000), 'K)'])
    ylabel('||e_k||_2/||e_0||_2')
    legend('Source', ['Anderson(', num2str(mlevel), ')' ], 'NDA', ['NDA-Anderson(', num2str(mlevel), ')' ], 'JFNK-NDA')
    xlim([iter_Nps(1), iter_Nps(end)])
    ylim([1e-3, 1])
else
    figure(19)
    semilogy(iter_Nps(1:size(source_rhist_diff,1)), source_rhist_diff(:)/source_rhist_diff(1), '-ok', ...
        iter_Nps(1:size(anders_rhist_diff,1)), anders_rhist_diff(:)/anders_rhist_diff(1), '-og', ...
        iter_Nps(1:size(nda_rhist_diff,1)), nda_rhist_diff(:)/nda_rhist_diff(1), '-ob', ...
        iter_Nps(1:size(nda_anders_rhist_diff,1)), nda_anders_rhist_diff(:)/nda_anders_rhist_diff(1), '-or', ...
        knl_iter_Nps(1:end), knl_nda_rhist_diff(:)/knl_nda_rhist_diff(1), '-oc', ...
        'LineWidth', 2)
    set(gca, 'FontSize', 14)
    xlabel(['Total Number of Histories (Np_0 = ', num2str(Np/1000), 'K)'])
    ylabel('||e_k||_2/||e_0||_2')
    legend('Source', ['Anderson(', num2str(mlevel), ')' ], 'NDA', ['NDA-Anderson(', num2str(mlevel), ')'], 'JFNK-NDA')
    xlim([ iter_Nps(1), max(knl_iter_Nps(end), iter_Nps(end)) ])
    ylim([1e-4, 1])
end





if(np_factor ~= 1)
    figure(19)
    loglog(iter_Nps(1:size(source_rhist,1)), source_rhist(:,1)/source_rhist(1,1), '-ok', ...
        iter_Nps(1:size(anders_rhist,1)), anders_rhist(:,1)/anders_rhist(1,1), '-og', ...
        iter_Nps(1:size(nda_rhist,1)), nda_rhist(:,1)/nda_rhist(1,1), '-ob', ...
        iter_Nps(1:size(nda_anders_rhist,1)), nda_anders_rhist(:,1)/nda_anders_rhist(1,1), '-or', ...
        knl_iter_Nps(1:end), knl_nda_rhist_diff(:)/knl_nda_rhist_diff(1), '-oc', ...
        'LineWidth', 2)
    set(gca, 'FontSize', 14)
    xlabel(['Total Number of Histories (Np_0 = ', num2str(Np*2/1000), 'K)'])
    ylabel('||r_k||_2/||r_0||_2')
    legend('Source', ['Anderson(', num2str(mlevel), ')' ], 'NDA', ['NDA-Anderson(', num2str(mlevel), ')' ], 'JFNK-NDA')
    xlim([iter_Nps(1), iter_Nps(end)])
    ylim([1e-3, 1])
else
    figure(19)
    semilogy(iter_Nps(1:size(source_rhist,1)), source_rhist(:,1)/source_rhist(1,1), '-ok', ...
        iter_Nps(1:size(anders_rhist,1)), anders_rhist(:,1)/anders_rhist(1,1), '-og', ...
        iter_Nps(1:size(nda_rhist,1)), nda_rhist(:,1)/nda_rhist(1,1), '-ob', ...
        iter_Nps(1:size(nda_anders_rhist,1)), nda_anders_rhist(:,1)/nda_anders_rhist(1,1), '-or', ...
        knl_iter_Nps, knl_nda_rhist(:,1)/knl_nda_rhist(1,1), '-oc', ...
        'LineWidth', 2)
    set(gca, 'FontSize', 14)
    xlabel(['Total Number of Histories (Np_0 = ', num2str(Np/1000), 'K)'])
    ylabel('||r_k||_2/||r_0||_2')
    legend('Source', ['Anderson(', num2str(mlevel), ')' ], 'NDA', ['NDA-Anderson(', num2str(mlevel), ')'], 'JFNK-NDA')
    xlim([ iter_Nps(1), max(knl_iter_Nps(end), iter_Nps(end)) ])
    ylim([1e-7, 1])
end








% data.ar = rec_mu;
%
% Is_zero = recoverI(nda_newton_sourcef, data, 'left')';
% Is_tau = recoverI(nda_newton_sourcef, data, 'right')';
%
% data.ar = ang_r;
%
% disp('NDA Inexact-Newton-Armijo I(0,-mu) and I(tau,mu)')
% [Is_zero(disp_mu) Is_tau(disp_mu)]
%

%
% k = size(nda_rhist,1);
% transport_sweeps = sum(nda_rhist(:,2));
%
%
%
% % if(runProfAnderson && runProfSource)
%
%
% semilogy(nda_rhist(1:k,2),nda_rhist(1:k,1)/nda_rhist(1,1),'-','Color','black','LineWidth',2);
% set(gca,'FontSize',14);
% xlabel('Transport Sweeps');
% ylabel('||r_k/r_0||');
% saveas(gcf, 'Residual_Hist','pdf')
% saveas(gcf, 'Residual_Hist','fig')
%
% plot(cgrid, nda_newton_sourcef, '-', 'Color','black','LineWidth',2)
% set(gca,'FontSize',14);
% xlabel('Space');
% ylabel('Scalar Flux');
% saveas(gcf, 'Scalar_Flux','pdf')
% saveas(gcf, 'Scalar_Flux','fig')
%
%
% plot(1:nx-1, final_res, '-', 'Color','black','LineWidth',2)
% set(gca,'FontSize',14);
% xlabel('Space');
% ylabel('Residual');
% saveas(gcf, 'Final_Residual','pdf')
% saveas(gcf, 'Final_Residual','fig')








